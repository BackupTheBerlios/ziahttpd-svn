[x] implement the lock function on unix
[x] implement the system thread
	-> should at least be able to unblock threads
[x] implement the net::server class
[~] make the servers reapable
[ ] correct the debug_msg bug (when thread id and others...)
[ ] implement <system></system> in the config file, for
	all balise related to the system config
[x] implement ONE SERVER
	-> implement the core, handling pool, srvlist...
	-> implement one server
[x] implement the run method
[x] try to reap all the resource that are older than <timeout>
[x] problem when the thread implementing the last client timeouts

// two thread config
[x] system config file
	poll delay
	expiration delay
	size of the backlog queue
[x] implement reset on http
[2] test leaks + on failure, on client deconnection
[3] implement file/resource management
[4] try to guess rush from the clients
[x] limit the line size


today
[ ] implement a kind of static limit for the body
[ ] impelement by fly resources
[ ] impelement file resources
[ ] implement process resource
[ ] implement the resource manager
	-> for in memory resources, the session should have a static buffer
	-> file should be cache at the fd level
	-> function to match a file against another one
	-> function to lock a file
[ ] make test tonight on file resources
[ ] if omode is input, flush the input, else if
	omode is output, flush the ouput
[x] think of releasing the target resource if allocated...
[x] for the moment, the resource manager's only role is
	to allocate a new resource/delete it
[x] pass the core to the thread server
[ ] turn the nbytes unsigned int into unsigned long long
[x] implement the file opening in the file::file constructor
[x] for all the sending/receiving function, ensure the whole buffer
	is transmitted before returning
[x] change the resource factory, cleaner
[x] bug when refreshing
[x] see why the cpu bug
[x] reset the request
[x] see for the send file function
[x] segfault on the release function, destructing the file
	-> probleme in the close function
[>] implement the process resouce
[>] mark the process output as non blocking, or
	find a scheme to read from the process output
	without blocking (sysapi wrapper?)
		-> windows: waitforsingleobject/timeout_read
		-> unix: non blocking fd
[>] flush_environ should take a (key_string, val_string) parameter
[x] implement the resource_process in manager
[ ] cleaner way to get error from resource creation
[ ] solve the input problem, case when method is get
	of cgi with large sized body
[ ] in the process resource: take the omode into account(minimizing fds used)



@bugs:
	leaks from the mline(?)

 
@optimization
	static linking
